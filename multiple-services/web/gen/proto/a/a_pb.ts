// @generated by protoc-gen-es v0.0.10 with parameter "target=ts,ts_nocheck=false"
// @generated from file proto/a/a.proto (package syumai.connect_examples.multiple_serivces.a, syntax proto3)
/* eslint-disable */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message syumai.connect_examples.multiple_serivces.a.ARequest
 */
export class ARequest extends Message<ARequest> {
  constructor(data?: PartialMessage<ARequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "syumai.connect_examples.multiple_serivces.a.ARequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ARequest {
    return new ARequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ARequest {
    return new ARequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ARequest {
    return new ARequest().fromJsonString(jsonString, options);
  }

  static equals(a: ARequest | PlainMessage<ARequest> | undefined, b: ARequest | PlainMessage<ARequest> | undefined): boolean {
    return proto3.util.equals(ARequest, a, b);
  }
}

/**
 * @generated from message syumai.connect_examples.multiple_serivces.a.AResponse
 */
export class AResponse extends Message<AResponse> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<AResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "syumai.connect_examples.multiple_serivces.a.AResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AResponse {
    return new AResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AResponse {
    return new AResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AResponse {
    return new AResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AResponse | PlainMessage<AResponse> | undefined, b: AResponse | PlainMessage<AResponse> | undefined): boolean {
    return proto3.util.equals(AResponse, a, b);
  }
}

