// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/a/a.proto

package aconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	a "github.com/syumai/connect-examples/multiple-services/api/gen/proto/a"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AServiceName is the fully-qualified name of the AService service.
	AServiceName = "syumai.connect_examples.multiple_serivces.a.AService"
)

// AServiceClient is a client for the syumai.connect_examples.multiple_serivces.a.AService service.
type AServiceClient interface {
	AMethod(context.Context, *connect_go.Request[a.ARequest]) (*connect_go.Response[a.AResponse], error)
}

// NewAServiceClient constructs a client for the
// syumai.connect_examples.multiple_serivces.a.AService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aServiceClient{
		aMethod: connect_go.NewClient[a.ARequest, a.AResponse](
			httpClient,
			baseURL+"/syumai.connect_examples.multiple_serivces.a.AService/AMethod",
			opts...,
		),
	}
}

// aServiceClient implements AServiceClient.
type aServiceClient struct {
	aMethod *connect_go.Client[a.ARequest, a.AResponse]
}

// AMethod calls syumai.connect_examples.multiple_serivces.a.AService.AMethod.
func (c *aServiceClient) AMethod(ctx context.Context, req *connect_go.Request[a.ARequest]) (*connect_go.Response[a.AResponse], error) {
	return c.aMethod.CallUnary(ctx, req)
}

// AServiceHandler is an implementation of the syumai.connect_examples.multiple_serivces.a.AService
// service.
type AServiceHandler interface {
	AMethod(context.Context, *connect_go.Request[a.ARequest]) (*connect_go.Response[a.AResponse], error)
}

// NewAServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAServiceHandler(svc AServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/syumai.connect_examples.multiple_serivces.a.AService/AMethod", connect_go.NewUnaryHandler(
		"/syumai.connect_examples.multiple_serivces.a.AService/AMethod",
		svc.AMethod,
		opts...,
	))
	return "/syumai.connect_examples.multiple_serivces.a.AService/", mux
}

// UnimplementedAServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAServiceHandler struct{}

func (UnimplementedAServiceHandler) AMethod(context.Context, *connect_go.Request[a.ARequest]) (*connect_go.Response[a.AResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("syumai.connect_examples.multiple_serivces.a.AService.AMethod is not implemented"))
}
